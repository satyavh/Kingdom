(function() {
  var Stable, namespace,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  Stable = (function() {
    function Stable(name) {
      this.name = name;
      this.castle = $('[data-bind="array: ' + this.name + '"]');
      this.stable = this.castle.find('[data-bind="template: ' + this.name + '"]').detach();
    }

    Stable.prototype.clear = function() {
      return this.castle.empty();
    };

    Stable.prototype.addStable = function(index) {
      var el;
      el = this.stable.clone().appendTo(this.castle).show();
      el.attr('data-index', index);
      el.attr('data-model', this.name);
      return el;
    };

    return Stable;

  })();

  this.Castle = (function() {
    var jquery;

    Castle.prototype.stables = [];

    Castle.prototype.dom = [];

    Castle.prototype.bindings = ["disabled", "text", "src", "if", "unless", "array", "href", "id", "value", "height", "width"];

    Castle.prototype.events = ["click", "hover", "mouseover", "mouseleave"];

    function Castle(inauguration) {
      this.toggleProperty = __bind(this.toggleProperty, this);
      this.get = __bind(this.get, this);
      this.set = __bind(this.set, this);
      this.destroy = __bind(this.destroy, this);
      this.append = __bind(this.append, this);
      this.detach = __bind(this.detach, this);
      this.render = __bind(this.render, this);
      this.applyBindings = __bind(this.applyBindings, this);
      this.applyBinding = __bind(this.applyBinding, this);
      this.renderStables = __bind(this.renderStables, this);
      this.evaluateIfs = __bind(this.evaluateIfs, this);
      this.evaluateUnlesses = __bind(this.evaluateUnlesses, this);
      this.evaluateUnless = __bind(this.evaluateUnless, this);
      this.evaluateIf = __bind(this.evaluateIf, this);
      this.findPropertyValue = __bind(this.findPropertyValue, this);
      this.uberCastle = __bind(this.uberCastle, this);
      this.hide = __bind(this.hide, this);
      var key, value, _ref, _ref1, _ref2;
      this.name = inauguration.name;
      if (inauguration.properties != null) {
        _ref = inauguration.properties;
        for (key in _ref) {
          value = _ref[key];
          this.processData(key, value);
        }
      }
      if (inauguration.functions != null) {
        _ref1 = inauguration.functions;
        for (key in _ref1) {
          value = _ref1[key];
          this[key] = value;
        }
      }
      if (inauguration.soldiers != null) {
        _ref2 = inauguration.soldiers;
        for (key in _ref2) {
          value = _ref2[key];
          this.soldier(this.name + '.' + key, value);
        }
      }
      if (inauguration.model != null) {
        this.model = model;
      }
      this.castle = $('[data-template=' + this.name + ']');
      if (inauguration.construct != null) {
        this['construct'] = inauguration.construct;
        this.construct();
      }
      this.render();
    }

    Castle.prototype.hide = function() {
      return this.castle.hide();
    };

    Castle.prototype.uberCastle = function() {
      $('.template').hide();
      return this.castle.show();
    };

    Castle.prototype.findPropertyValue = function(condition) {
      var c, key, property, value;
      c = condition.split('.');
      property = c[0];
      if (this[property] == null) {
        return;
      }
      if (c.length > 1) {
        key = c.slice(1).join('.');
        value = this[property][key];
      } else {
        value = this[property];
      }
      return value;
    };

    Castle.prototype.evaluateIf = function(condition) {
      var el;
      el = $('[data-bind="if: ' + condition + '"]');
      if (this.findPropertyValue(condition) === true) {
        el.css({
          display: 'inline'
        });
        return el.parent().find('> [data-bind="else"]').hide();
      } else {
        el.hide();
        return el.parent().find('> [data-bind="else"]').css({
          display: 'inline'
        });
      }
    };

    Castle.prototype.evaluateUnless = function(condition) {
      var el;
      el = $('[data-bind="unless: ' + condition + '"]');
      if (this.findPropertyValue(condition) !== true) {
        el.css({
          display: 'inline'
        });
        return el.parent().find('> [data-bind="else"]').hide();
      } else {
        el.hide();
        return el.parent().find('> [data-bind="else"]').css({
          display: 'inline'
        });
      }
    };

    Castle.prototype.evaluateUnlesses = function(condition) {
      var _this = this;
      return $('[data-bind*="unless: "]').each(function(i, el) {
        var binding, _ref;
        _ref = $(el).data('bind').split(': '), binding = _ref[0], condition = _ref[1];
        return _this.evaluateUnless(condition);
      });
    };

    Castle.prototype.evaluateIfs = function(condition) {
      var _this = this;
      return $('[data-bind*="if: "]').each(function(i, el) {
        var binding, _ref;
        _ref = $(el).data('bind').split(': '), binding = _ref[0], condition = _ref[1];
        return _this.evaluateIf(condition);
      });
    };

    Castle.prototype.renderStables = function(stableName) {
      var el, i, item, stable, _i, _len, _ref, _results;
      if (this[stableName] == null) {
        return;
      }
      stable = _.filter(this.stables, function(s) {
        return s.name === stableName;
      });
      if (stable.length > 0) {
        stable = stable[0];
        stable.clear();
      } else {
        stable = new Stable(stableName);
        this.stables.push(stable);
      }
      _ref = this.get(stableName);
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        el = stable.addStable(i);
        _results.push(this.applyBindings(el));
      }
      return _results;
    };

    Castle.prototype.applyBinding = function(el, binding, value) {
      var mustache,
        _this = this;
      if (value != null) {
        mustache = new RegExp("({{)([a-z.]*)(}})", "ig");
        if (mustache.test(value)) {
          value = value.replace(mustache, function(_, start, val, end) {
            val = _this._parseValue(el, val);
            return val = _this.findPropertyValue(val);
          });
        } else {
          value = this._parseValue(el, value);
        }
      }
      if (_.indexOf(this.bindings, binding) > -1) {
        switch (binding) {
          case "disabled":
            if ($(el).is('input', 'button')) {
              $(el).prop(binding, this.findPropertyValue(value));
            } else {
              $(el).attr(binding, this.findPropertyValue(value));
            }
            break;
          case "text":
            $(el).text(this.findPropertyValue(value));
            break;
          case "src":
          case "id":
            if (this.findPropertyValue(value) != null) {
              $(el).attr(binding, this.findPropertyValue(value));
            } else {
              $(el).attr(binding, value);
            }
            break;
          case "if":
            this.evaluateIf(value);
            break;
          case "unless":
            this.evaluateUnless(value);
            break;
          case "value":
            $(el).val(this.findPropertyValue(value));
            $(el).keyup(function(e) {
              console.log(e.target.value);
              return _this.set(_this[value], e.target.value);
            });
            break;
          case "array":
            this.renderStables(value);
            break;
          case "background-image":
            $(el).css({
              'background-image': 'url("' + this.findPropertyValue(value) + '")'
            });
            break;
          case "height":
          case "width":
            $(el).css({
              binding: this.findPropertyValue(value)
            });
        }
      }
      if (_.indexOf(this.events, binding) > -1) {
        $(el).on(binding, function(e) {
          e.preventDefault();
          e.stopPropagation();
          return _this[value](el);
        });
      }
      if (_.indexOf(this.bindings, binding) === -1 && _.indexOf(this.events, binding) === -1) {
        if (value != null) {
          return $(el).attr('data-' + binding, this.findPropertyValue(value));
        }
      }
    };

    Castle.prototype._parseValue = function(el, value) {
      var index, model, parent, v;
      if (value != null) {
        v = value.split('.');
        if (v[0] === 'model') {
          parent = $(el).closest('.template');
          model = parent.data('model');
          index = parent.data('index');
          console.log(model, index);
          value = model + '.' + index + '.' + v[1];
        }
      }
      return value;
    };

    Castle.prototype.applyBindings = function(template) {
      var _this = this;
      return $(template).find('[data-bind]').each(function(i, el) {
        var b, binding, bindings, value, _i, _len, _ref, _results;
        bindings = $(el).data('bind').replace(/\s/g, '').split(',');
        _results = [];
        for (_i = 0, _len = bindings.length; _i < _len; _i++) {
          binding = bindings[_i];
          _ref = binding.split(':'), b = _ref[0], value = _ref[1];
          _this.addToDom(el, b, value);
          _results.push(_this.applyBinding(el, b, value));
        }
        return _results;
      });
    };

    Castle.prototype.addToDom = function(el, b, v) {
      return this.dom.push({
        el: el,
        binding: b,
        value: v
      });
    };

    Castle.prototype.render = function() {
      var _this = this;
      return $(document).ready(function() {
        _this.castle.show();
        return _this.applyBindings(_this.castle);
      });
    };

    Castle.prototype.detach = function() {
      return this.castle = this.castle.detach();
    };

    Castle.prototype.append = function(el) {
      return el.append(this.castle);
    };

    Castle.prototype.destroy = function() {
      this.castle.empty();
      return delete this;
    };

    Castle.prototype.set = function(key, value) {
      var bind, bindings, _i, _len, _results;
      this.processData(key, value);
      this.order(key, value);
      if (!this.dom) {
        return;
      }
      bindings = _.filter(this.dom, function(e) {
        return e.value === key;
      });
      if (!(bindings.length > 0)) {
        return;
      }
      _results = [];
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        bind = bindings[_i];
        _results.push(this.applyBinding(bind.el, bind.binding, bind.value));
      }
      return _results;
    };

    Castle.prototype.get = function(key) {
      if (_.isObject(this[key])) {
        return Kingdom.unflatten(this[key]);
      }
      return this[key];
    };

    jquery = $({});

    Castle.prototype.toggleProperty = function(key) {
      var value;
      value = this.get(key);
      if (typeof value !== 'boolean') {
        return;
      }
      return this.set(key, !value);
    };

    Castle.prototype.orders = {};

    Castle.prototype.soldier = function(order, soldier) {
      if (!this.orders[order]) {
        this.orders[order] = [];
      }
      return this.orders[order].push(soldier);
    };

    Castle.prototype.order = function(order, data, namespace) {
      var _this = this;
      if (namespace == null) {
        namespace = true;
      }
      if (namespace) {
        order = this.name + '.' + order;
      }
      if (!this.orders[order] || this.orders[order].length < 1) {
        return;
      }
      return _.each(this.orders[order], function(soldier) {
        soldier.apply(_this, [data] || []);
      });
    };

    Castle.prototype.dischargeSoldier = function(soldier) {
      return this.orders[soldier];
    };

    Castle.prototype.processData = function(key, value) {
      if (_.isObject(value)) {
        if (value.length === 0) {
          return this[key] = [];
        } else {
          return this[key] = Kingdom.flatten(value);
        }
      } else {
        return this[key] = value;
      }
    };

    Castle.prototype.renderMustaches = function(template) {
      var mustache;
      template = $(template);
      mustache = new RegExp("({{)([a-z .]*)(}})", "g");
      return template;
    };

    return Castle;

  })();

  this.Kingdom = {
    create: function(name) {
      return namespace(name, function(exports) {
        exports.Castle = Castle;
        return exports.Stable = Stable;
      });
    },
    flatten: function(data) {
      var recurse, result;
      result = {};
      recurse = function(cur, prop) {
        var i, isEmpty, l, p;
        if (Object(cur) !== cur) {
          result[prop] = cur;
        } else if (_.isArray(cur)) {
          i = 0;
          l = cur.length;
          while (i < l) {
            recurse(cur[i], prop ? prop + '.' + i : '' + i);
            i++;
          }
          if (l === 0) {
            result[prop] = [];
          }
        } else {
          isEmpty = true;
          for (p in cur) {
            isEmpty = false;
            recurse(cur[p], prop ? prop + '.' + p : p);
          }
          if (isEmpty) {
            result[prop] = {};
          }
        }
      };
      recurse(data, '');
      return result;
    },
    unflatten: function(data) {
      'use strict';
      var cur, idx, last, p, prop, result, temp;
      if (Object(data) !== data || _.isArray(data)) {
        return data;
      }
      result = {};
      cur = void 0;
      prop = void 0;
      idx = void 0;
      last = void 0;
      temp = void 0;
      for (p in data) {
        cur = result;
        prop = '';
        last = 0;
        while (true) {
          idx = p.indexOf('.', last);
          temp = p.substring(last, idx !== -1 ? idx : void 0);
          cur = cur[prop] || (cur[prop] = !isNaN(parseInt(temp)) ? [] : {});
          prop = temp;
          last = idx + 1;
          if (!(idx >= 0)) {
            break;
          }
        }
        cur[prop] = data[p];
      }
      return result[''];
    }
  };

}).call(this);
